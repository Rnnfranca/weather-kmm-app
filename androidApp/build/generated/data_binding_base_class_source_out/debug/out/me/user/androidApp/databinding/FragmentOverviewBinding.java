// Generated by view binder compiler. Do not edit!
package me.user.androidApp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.user.androidApp.R;

public final class FragmentOverviewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final TextView currentWeather;

  @NonNull
  public final TextView description;

  @NonNull
  public final View divider;

  @NonNull
  public final TextView feelsLike;

  @NonNull
  public final LinearLayout linearLayoutContainer;

  @NonNull
  public final LinearLayout linearLayoutLocationWarning;

  @NonNull
  public final LinearLayout linearLayoutPermissionWarning;

  @NonNull
  public final LinearLayout llCurrent;

  @NonNull
  public final LinearLayout llRealFeel;

  @NonNull
  public final LinearLayout llTempMax;

  @NonNull
  public final TextView location;

  @NonNull
  public final ImageView mainImage;

  @NonNull
  public final FrameLayout progressBar;

  @NonNull
  public final TextView realFeel;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  @NonNull
  public final TextView tempMax;

  @NonNull
  public final TextView tempMin;

  @NonNull
  public final TextView unit;

  private FragmentOverviewBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout constraintLayout, @NonNull TextView currentWeather,
      @NonNull TextView description, @NonNull View divider, @NonNull TextView feelsLike,
      @NonNull LinearLayout linearLayoutContainer,
      @NonNull LinearLayout linearLayoutLocationWarning,
      @NonNull LinearLayout linearLayoutPermissionWarning, @NonNull LinearLayout llCurrent,
      @NonNull LinearLayout llRealFeel, @NonNull LinearLayout llTempMax, @NonNull TextView location,
      @NonNull ImageView mainImage, @NonNull FrameLayout progressBar, @NonNull TextView realFeel,
      @NonNull RecyclerView recyclerView, @NonNull SwipeRefreshLayout swipeRefresh,
      @NonNull TextView tempMax, @NonNull TextView tempMin, @NonNull TextView unit) {
    this.rootView = rootView;
    this.constraintLayout = constraintLayout;
    this.currentWeather = currentWeather;
    this.description = description;
    this.divider = divider;
    this.feelsLike = feelsLike;
    this.linearLayoutContainer = linearLayoutContainer;
    this.linearLayoutLocationWarning = linearLayoutLocationWarning;
    this.linearLayoutPermissionWarning = linearLayoutPermissionWarning;
    this.llCurrent = llCurrent;
    this.llRealFeel = llRealFeel;
    this.llTempMax = llTempMax;
    this.location = location;
    this.mainImage = mainImage;
    this.progressBar = progressBar;
    this.realFeel = realFeel;
    this.recyclerView = recyclerView;
    this.swipeRefresh = swipeRefresh;
    this.tempMax = tempMax;
    this.tempMin = tempMin;
    this.unit = unit;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentOverviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentOverviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_overview, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentOverviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout constraintLayout = (ConstraintLayout) rootView;

      id = R.id.current_weather;
      TextView currentWeather = rootView.findViewById(id);
      if (currentWeather == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = rootView.findViewById(id);
      if (description == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = rootView.findViewById(id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.feels_like;
      TextView feelsLike = rootView.findViewById(id);
      if (feelsLike == null) {
        break missingId;
      }

      id = R.id.linear_layout_container;
      LinearLayout linearLayoutContainer = rootView.findViewById(id);
      if (linearLayoutContainer == null) {
        break missingId;
      }

      id = R.id.linear_layout_location_warning;
      LinearLayout linearLayoutLocationWarning = rootView.findViewById(id);
      if (linearLayoutLocationWarning == null) {
        break missingId;
      }

      id = R.id.linear_layout_permission_warning;
      LinearLayout linearLayoutPermissionWarning = rootView.findViewById(id);
      if (linearLayoutPermissionWarning == null) {
        break missingId;
      }

      id = R.id.ll_current;
      LinearLayout llCurrent = rootView.findViewById(id);
      if (llCurrent == null) {
        break missingId;
      }

      id = R.id.ll_real_feel;
      LinearLayout llRealFeel = rootView.findViewById(id);
      if (llRealFeel == null) {
        break missingId;
      }

      id = R.id.ll_temp_max;
      LinearLayout llTempMax = rootView.findViewById(id);
      if (llTempMax == null) {
        break missingId;
      }

      id = R.id.location;
      TextView location = rootView.findViewById(id);
      if (location == null) {
        break missingId;
      }

      id = R.id.mainImage;
      ImageView mainImage = rootView.findViewById(id);
      if (mainImage == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      FrameLayout progressBar = rootView.findViewById(id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.real_feel;
      TextView realFeel = rootView.findViewById(id);
      if (realFeel == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = rootView.findViewById(id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.swipe_refresh;
      SwipeRefreshLayout swipeRefresh = rootView.findViewById(id);
      if (swipeRefresh == null) {
        break missingId;
      }

      id = R.id.temp_max;
      TextView tempMax = rootView.findViewById(id);
      if (tempMax == null) {
        break missingId;
      }

      id = R.id.temp_min;
      TextView tempMin = rootView.findViewById(id);
      if (tempMin == null) {
        break missingId;
      }

      id = R.id.unit;
      TextView unit = rootView.findViewById(id);
      if (unit == null) {
        break missingId;
      }

      return new FragmentOverviewBinding((ConstraintLayout) rootView, constraintLayout,
          currentWeather, description, divider, feelsLike, linearLayoutContainer,
          linearLayoutLocationWarning, linearLayoutPermissionWarning, llCurrent, llRealFeel,
          llTempMax, location, mainImage, progressBar, realFeel, recyclerView, swipeRefresh,
          tempMax, tempMin, unit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
